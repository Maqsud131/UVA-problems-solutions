#include <bits/stdc++.h>
using namespace std;

typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;

vi p,r;  // p- parent , r- rank

void unionFind(int n){  //clearing parent, rank assgning new values
	r.assign(n,0);  
	p.assign(n,0);
	for(int i=0;i<n;i++)p[i]=i;
}

int findSet(int i){
	if(p[i]==i)return i;
	else return findSet(p[i]);
}

bool isSameSet(int i,int j){
	return findSet(i)==findSet(j);
}

void unionSet(int i,int j){
	if(!isSameSet(i,j)){
		int x=findSet(i), y=findSet(j);
		if(r[x]>r[y]){ p[y]=x;
		}else{ 
			p[x]=y;
			if(r[x]==r[y])r[y]++;
		}
	}
}

int main() {
	int t,n,e,u,v,w,ml;
	scanf("%d",&t);
	for(int j=1;j<=t;j++){
		scanf("%d %d",&n,&e);
		vector<pair<int,ii>> ed;
		int comp[n];
		for(int i=0;i<e;i++){
			scanf("%d %d %d",&u,&v,&w);
			ed.push_back(make_pair(-w,ii(u,v)));
			//printf("%d %d %d\n",ed[i].second.first,ed[i].second.second,ed[i].first);
		}
		sort(ed.begin(), ed.begin()+e);
		
		ml=1001;
		 unionFind(n);
		 
		 for(int i=0;i<e;i++){
		 	pair<int, ii> front=ed[i];
		 	if(!isSameSet(front.second.first,front.second.second)){
		 		if(-front.first<ml)ml=-front.first;
				unionSet(front.second.first,front.second.second);
			}
		 }
		
		printf("Case #%d: %d\n",j,ml);
		
		
	}

	return 0;
}
#include <bits/stdc++.h>
using namespace std;

typedef pair<int, int> ii;
typedef vector<ii> vii;
typedef vector<int> vi;

vi p,r;  // p- parent , r- rank

void unionFind(int n){  //clearing parent, rank assgning new values
	r.assign(n,0);  
	p.assign(n,0);
	for(int i=0;i<n;i++)p[i]=i;
}

int findSet(int i){
	if(p[i]==i)return i;
	else return findSet(p[i]);
}

bool isSameSet(int i,int j){
	return findSet(i)==findSet(j);
}

void unionSet(int i,int j){
	if(!isSameSet(i,j)){
		int x=findSet(i), y=findSet(j);
		if(r[x]>r[y]){ p[y]=x;
		}else{ 
			p[x]=y;
			if(r[x]==r[y])r[y]++;
		}
	}
}

int main() {
	int t,n,e,u,v,w,ml,ml2,p,tem,s,d,tl;
	t=1;
	while(scanf("%d %d",&n,&e)==2){
		if(n==0 && e==0)break;
		vector<int> gr[n];
		vector<int> we[n];
		vector<pair<int,ii> > ed;
		int el[e];
		for(int i=0;i<e;i++)el[i]=0;

		for(int i=0;i<e;i++){
			scanf("%d %d %d",&u,&v,&w);
			ed.push_back(make_pair(-w,ii(u-1,v-1)));
			//printf("%d %d %d\n",ed[i].second.first,ed[i].second.second,ed[i].first);
		}
		scanf("%d %d %d",&s,&d,&tl);
		sort(ed.begin(), ed.begin()+e);
		
		 unionFind(n);
		 
		 for(int i=0;i<e;i++){
		 	pair<int, ii> front=ed[i];
		 	if(!isSameSet(front.second.first,front.second.second)){
		 		el[i]=1;
		 		gr[front.second.first].push_back(front.second.second);
		 		gr[front.second.second].push_back(front.second.first);
		 		we[front.second.first].push_back(-front.first);
		 		we[front.second.second].push_back(-front.first);
		 		//if(indg[front.second.first]>1 && indg[front.second.second]>1)p=i;
				unionSet(front.second.first,front.second.second);
			}
		 }
		 s--;
		 d--;
		 int col[n];
		 for(int i=0;i<n;i++)col[i]=2147383647;
		 queue<int> q;
		 q.push(s);
		 col[s]=2147383647;
		 while(!q.empty()){
		 	u=q.front();
		 	q.pop();
		 	if(u==d)break;
		 	for(int i=0;i<gr[u].size();i++){
		 		if(col[gr[u][i]]==2147383647 && gr[u][i]!=s){
		 			q.push(gr[u][i]);
		 			
		 			if(col[u]>we[u][i]) col[gr[u][i]]=we[u][i];
		 			else col[gr[u][i]]=col[u];
		 			//printf("%d %d\n",gr[u][i] ,col[gr[u][i]]);
		 		}	
		 	}
		 }
		 if(tl%col[d]==0)tl=tl/(col[d]-1);
		 else tl=1+tl/(col[d]-1);
		 printf("Scenario #%d\n",t);
		 if(s!=d)printf("Minimum Number of Trips = %d\n",tl);
		 else printf("Minimum Number of Trips = 0\n");
		 printf("\n");
		 t++;
	}
	return 0;
}